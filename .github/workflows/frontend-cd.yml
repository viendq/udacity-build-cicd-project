# Workflow name
name: Frontend Continuous Deployment
# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    branches:
      - main
    paths: starter/frontend

defaults:
  run:
    working-directory: starter/frontend
# Jobs defined in the workflow
jobs:
  running-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest
          node-version-file: starter/frontend/.nvmrc
          
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: install dependancy
        run: npm ci

      - name: Run tests
        run: npm test
        

  running-linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest
          node-version-file: starter/frontend/.nvmrc

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: install dependancy
        run: npm ci

      - name: run linter
        run: npm run lint

  # build-actions:
  #   needs: [running-test, running-linter]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js 
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: latest
  #         node-version-file: starter/frontend/.nvmrc

  #     - name: Restore cache
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  #     - name: install dependancy
  #       run: npm ci
        
  #     - name: Build Docker image
  #       run: docker build --build-arg=REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL --tag=mp-frontend:latest .

  #     - name: Run Docker container
  #       run: docker run --name mp-frontend -p 3000:3000 -d mp-frontend
        
  post-build-actions:
    needs: [running-test, running-linter]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.SECRETKEY }}
          aws-region: us-east-1
          
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build Docker image
        env:
          ECR_REGISTRY: "136679609492.dkr.ecr.us-east-1.amazonaws.com"
          ECR_REPOSITORY: "frontend"
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "IMAGE_TAG: $IMAGE_TAG"
          docker build --build-arg=REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL --tag=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Deploy Kubernetes manifests
        uses: imranismail/setup-kustomize@v2
      - run: |
          set -e -o pipefail
          echo "Fetching IAM github-action-user ARN"
          userarn=$(aws iam get-user --user-name github-action-user | jq -r .User.Arn)
          echo "Downloading tool..."
          curl -X GET -L https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.6.2/aws-iam-authenticator_0.6.2_linux_amd64 -o aws-iam-authenticator
          chmod +x aws-iam-authenticator
          echo "Updating permissions"
          ./aws-iam-authenticator add user --userarn="${userarn}" --username=github-action-role --groups=system:masters --kubeconfig="$HOME"/.kube/config --prompt=false
          echo "Cleaning up"
          rm aws-iam-authenticator
          echo "Done!"
          aws eks --region us-east-1 update-kubeconfig --name cluster
          pwd
          cd k8s
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          ./kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          ./kustomize build | kubectl apply -f -
